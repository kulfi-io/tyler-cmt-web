$base-font-color: #515769;
$start-gradient: #fdfbfb;
$end-gradient: #ebedee;
$outer-poly-fill: #ffffff;
$outer-path-fill: #c60021;
$inner-circle-1: #0ba360;
$inner-circle-2: #c13b36;
$inner-circle-3: #b191ff;
$inner-circle-4: #843b62;
$inner-circle-5: #241e4e;
$text-rect-fill: #0ba360;

#circle-svg {
  height: 400px;
  width: -moz-available;
  width: -webkit-fill-available;
}

.circle-container {
  width: auto;

  .circle-animation {
    .outer-object {
      .outer-path-fill {
        fill: $outer-path-fill;
      }
      .outer-poly-fill {
        fill: $outer-poly-fill;
      }
    }

    .inner-object {
      .circle-1 {
        fill: $inner-circle-1;
      }

      .circle-2 {
        fill: $inner-circle-2;
      }

      .circle-3 {
        fill: $inner-circle-3;
      }

      .circle-4 {
        fill: $inner-circle-4;
      }

      .circle-5 {
        fill: $inner-circle-5;
      }
    }
  }

  .text-content {
    text {
      font-family: "Pathway Gothic One";
      font-size: 34.16px;
      fill: $base-font-color;
    }

    polygon {
      fill: $outer-path-fill;
    }
  }

  rect,
  polyline,
  polygon {
    fill: $text-rect-fill;
  }
}

@keyframes rotate-right {
  from {
    -webkit-transform: rotate(0deg);
  }
  to {
    -webkit-transform: rotate(360deg);
  }
}

@keyframes rotate-left {
  from {
    -webkit-transform: rotate(0deg);
  }
  to {
    -webkit-transform: rotate(-360deg);
  }
}

@keyframes hover {
  0% {
    -webkit-transform: translateY(0%);
  }
  50% {
    -webkit-transform: translateY(5%);
  }
  100% {
    -webkit-transform: translateY(0%);
  }
}

@keyframes pull {
  0% {
    -webkit-transform: scaleY(1);
  }
  40% {
    -webkit-transform: scaleY(1.01);
  }
  60% {
    -webkit-transform: scaleY(0.99);
  }
  80% {
    -webkit-transform: scaleY(1.01);
  }
  100% {
    -webkit-transform: scaleY(0.99);
  }
  80% {
    -webkit-transform: scaleY(1.01);
  }
  100% {
    -webkit-transform: scaleY(1);
  }
}

@function getSpeed($speed, $type: turtle) {
  $secs: 360;
  $divider: 1;
  @if ($type == turtle) {
    $divider: 1;
  } @else if($type == rabbit) {
    $divider: 10;
  } @else {
    $divider: 60;
  }
  @if $speed == fastest {
    $secs: 60 / $divider;
  } @else if $speed == really-fast {
    $secs: 120 / $divider;
  } @else if $speed == fast {
    $secs: 180 / $divider;
  } @else if $speed == slow {
    $secs: 240 / $divider;
  } @else if $speed == really-slow {
    $secs: 300 / $divider;
  } @else if $speed == slowest {
    $secs: 360 / $divider;
  }
  @return #{$secs}s;
}

@mixin _rotate-animation($direction, $speed, $type) {
  -webkit-transform: translate3d(0, 0, 0);
  -webkit-animation: rotate-#{$direction} getSpeed($speed, $type) linear 0s infinite;
}

@mixin _hover-animation($duration, $delay) {
  -webkit-transform: translate3d(0, 0, 0);
  -webkit-animation: hover #{$duration}s linear #{$delay}s infinite;
}

@mixin _pull-animation($duration, $delay, $x: 200px, $y: 200px) {
  -webkit-transform: translate3d(0, 0, 0);
  -webkit-transform-origin: $x $y;
  -webkit-animation: pull #{$duration}s linear #{$delay}s infinite alternate;
}

@mixin rotate($type, $direction: left, $speed: slow, $x: 200px, $y: 200px) {
  -webkit-transform: translate3d(0, 0, 0);
  -webkit-transform-origin: $x $y;
  @include _rotate-animation($direction, $speed, $type);
}

#outer-object {
  @include rotate(turtle, right, slow);
}

// Inner Circles
@for $i from 1 through 5 {
  $direction: left;
  $speed: really-fast;
  .circle-#{$i} {
    @if $i % 2 == 1 {
      $direction: right;
      $speed: really-fast;
    } @else {
      $direction: left;
      $speed: slow;
    }
    @include rotate(rabbit, $direction, $speed);
  }
}
